/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
Contact: yuga.cohler@coinbase.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ServerSignerEventEvent - struct for ServerSignerEventEvent
type ServerSignerEventEvent struct {
	SeedCreationEvent *SeedCreationEvent
	SignatureCreationEvent *SignatureCreationEvent
}

// SeedCreationEventAsServerSignerEventEvent is a convenience function that returns SeedCreationEvent wrapped in ServerSignerEventEvent
func SeedCreationEventAsServerSignerEventEvent(v *SeedCreationEvent) ServerSignerEventEvent {
	return ServerSignerEventEvent{
		SeedCreationEvent: v,
	}
}

// SignatureCreationEventAsServerSignerEventEvent is a convenience function that returns SignatureCreationEvent wrapped in ServerSignerEventEvent
func SignatureCreationEventAsServerSignerEventEvent(v *SignatureCreationEvent) ServerSignerEventEvent {
	return ServerSignerEventEvent{
		SignatureCreationEvent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServerSignerEventEvent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SeedCreationEvent
	err = newStrictDecoder(data).Decode(&dst.SeedCreationEvent)
	if err == nil {
		jsonSeedCreationEvent, _ := json.Marshal(dst.SeedCreationEvent)
		if string(jsonSeedCreationEvent) == "{}" { // empty struct
			dst.SeedCreationEvent = nil
		} else {
			if err = validator.Validate(dst.SeedCreationEvent); err != nil {
				dst.SeedCreationEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SeedCreationEvent = nil
	}

	// try to unmarshal data into SignatureCreationEvent
	err = newStrictDecoder(data).Decode(&dst.SignatureCreationEvent)
	if err == nil {
		jsonSignatureCreationEvent, _ := json.Marshal(dst.SignatureCreationEvent)
		if string(jsonSignatureCreationEvent) == "{}" { // empty struct
			dst.SignatureCreationEvent = nil
		} else {
			if err = validator.Validate(dst.SignatureCreationEvent); err != nil {
				dst.SignatureCreationEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.SignatureCreationEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SeedCreationEvent = nil
		dst.SignatureCreationEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ServerSignerEventEvent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ServerSignerEventEvent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServerSignerEventEvent) MarshalJSON() ([]byte, error) {
	if src.SeedCreationEvent != nil {
		return json.Marshal(&src.SeedCreationEvent)
	}

	if src.SignatureCreationEvent != nil {
		return json.Marshal(&src.SignatureCreationEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServerSignerEventEvent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SeedCreationEvent != nil {
		return obj.SeedCreationEvent
	}

	if obj.SignatureCreationEvent != nil {
		return obj.SignatureCreationEvent
	}

	// all schemas are nil
	return nil
}

type NullableServerSignerEventEvent struct {
	value *ServerSignerEventEvent
	isSet bool
}

func (v NullableServerSignerEventEvent) Get() *ServerSignerEventEvent {
	return v.value
}

func (v *NullableServerSignerEventEvent) Set(val *ServerSignerEventEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSignerEventEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSignerEventEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSignerEventEvent(val *ServerSignerEventEvent) *NullableServerSignerEventEvent {
	return &NullableServerSignerEventEvent{value: val, isSet: true}
}

func (v NullableServerSignerEventEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSignerEventEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


