/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
Contact: yuga.cohler@coinbase.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// Feature Features that can be enabled for a wallet
type Feature string

// List of Feature
const (
	FEATURE_TRANSFER Feature = "transfer"
	FEATURE_TRADE Feature = "trade"
	FEATURE_FAUCET Feature = "faucet"
	FEATURE_SERVER_SIGNER Feature = "server_signer"
)

// All allowed values of Feature enum
var AllowedFeatureEnumValues = []Feature{
	"transfer",
	"trade",
	"faucet",
	"server_signer",
}

func (v *Feature) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Feature(value)
	for _, existing := range AllowedFeatureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Feature", value)
}

// NewFeatureFromValue returns a pointer to a valid Feature
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeatureFromValue(v string) (*Feature, error) {
	ev := Feature(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Feature: valid values are %v", v, AllowedFeatureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Feature) IsValid() bool {
	for _, existing := range AllowedFeatureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Feature value
func (v Feature) Ptr() *Feature {
	return &v
}

type NullableFeature struct {
	value *Feature
	isSet bool
}

func (v NullableFeature) Get() *Feature {
	return v.value
}

func (v *NullableFeature) Set(val *Feature) {
	v.value = val
	v.isSet = true
}

func (v NullableFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeature(val *Feature) *NullableFeature {
	return &NullableFeature{value: val, isSet: true}
}

func (v NullableFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

