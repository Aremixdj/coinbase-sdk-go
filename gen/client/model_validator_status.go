/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ValidatorStatus The status of the validator.
type ValidatorStatus string

// List of ValidatorStatus
const (
	VALIDATORSTATUS_UNKNOWN ValidatorStatus = "unknown"
	VALIDATORSTATUS_PROVISIONING ValidatorStatus = "provisioning"
	VALIDATORSTATUS_PROVISIONED ValidatorStatus = "provisioned"
	VALIDATORSTATUS_DEPOSITED ValidatorStatus = "deposited"
	VALIDATORSTATUS_PENDING_ACTIVATION ValidatorStatus = "pending_activation"
	VALIDATORSTATUS_ACTIVE ValidatorStatus = "active"
	VALIDATORSTATUS_EXITING ValidatorStatus = "exiting"
	VALIDATORSTATUS_EXITED ValidatorStatus = "exited"
	VALIDATORSTATUS_WITHDRAWAL_AVAILABLE ValidatorStatus = "withdrawal_available"
	VALIDATORSTATUS_WITHDRAWAL_COMPLETE ValidatorStatus = "withdrawal_complete"
	VALIDATORSTATUS_ACTIVE_SLASHED ValidatorStatus = "active_slashed"
	VALIDATORSTATUS_EXITED_SLASHED ValidatorStatus = "exited_slashed"
	VALIDATORSTATUS_REAPED ValidatorStatus = "reaped"
)

// All allowed values of ValidatorStatus enum
var AllowedValidatorStatusEnumValues = []ValidatorStatus{
	"unknown",
	"provisioning",
	"provisioned",
	"deposited",
	"pending_activation",
	"active",
	"exiting",
	"exited",
	"withdrawal_available",
	"withdrawal_complete",
	"active_slashed",
	"exited_slashed",
	"reaped",
}

func (v *ValidatorStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidatorStatus(value)
	for _, existing := range AllowedValidatorStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidatorStatus", value)
}

// NewValidatorStatusFromValue returns a pointer to a valid ValidatorStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidatorStatusFromValue(v string) (*ValidatorStatus, error) {
	ev := ValidatorStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidatorStatus: valid values are %v", v, AllowedValidatorStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidatorStatus) IsValid() bool {
	for _, existing := range AllowedValidatorStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidatorStatus value
func (v ValidatorStatus) Ptr() *ValidatorStatus {
	return &v
}

type NullableValidatorStatus struct {
	value *ValidatorStatus
	isSet bool
}

func (v NullableValidatorStatus) Get() *ValidatorStatus {
	return v.value
}

func (v *NullableValidatorStatus) Set(val *ValidatorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableValidatorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableValidatorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidatorStatus(val *ValidatorStatus) *NullableValidatorStatus {
	return &NullableValidatorStatus{value: val, isSet: true}
}

func (v NullableValidatorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidatorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

