/*
Coinbase Platform API

This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

API version: 0.0.1-alpha
Contact: yuga.cohler@coinbase.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// StakingOperationMetadata - struct for StakingOperationMetadata
type StakingOperationMetadata struct {
	ArrayOfSignedVoluntaryExitMessageMetadata *[]SignedVoluntaryExitMessageMetadata
}

// []SignedVoluntaryExitMessageMetadataAsStakingOperationMetadata is a convenience function that returns []SignedVoluntaryExitMessageMetadata wrapped in StakingOperationMetadata
func ArrayOfSignedVoluntaryExitMessageMetadataAsStakingOperationMetadata(v *[]SignedVoluntaryExitMessageMetadata) StakingOperationMetadata {
	return StakingOperationMetadata{
		ArrayOfSignedVoluntaryExitMessageMetadata: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *StakingOperationMetadata) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfSignedVoluntaryExitMessageMetadata
	err = newStrictDecoder(data).Decode(&dst.ArrayOfSignedVoluntaryExitMessageMetadata)
	if err == nil {
		jsonArrayOfSignedVoluntaryExitMessageMetadata, _ := json.Marshal(dst.ArrayOfSignedVoluntaryExitMessageMetadata)
		if string(jsonArrayOfSignedVoluntaryExitMessageMetadata) == "{}" { // empty struct
			dst.ArrayOfSignedVoluntaryExitMessageMetadata = nil
		} else {
			if err = validator.Validate(dst.ArrayOfSignedVoluntaryExitMessageMetadata); err != nil {
				dst.ArrayOfSignedVoluntaryExitMessageMetadata = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfSignedVoluntaryExitMessageMetadata = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfSignedVoluntaryExitMessageMetadata = nil

		return fmt.Errorf("data matches more than one schema in oneOf(StakingOperationMetadata)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(StakingOperationMetadata)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StakingOperationMetadata) MarshalJSON() ([]byte, error) {
	if src.ArrayOfSignedVoluntaryExitMessageMetadata != nil {
		return json.Marshal(&src.ArrayOfSignedVoluntaryExitMessageMetadata)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StakingOperationMetadata) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfSignedVoluntaryExitMessageMetadata != nil {
		return obj.ArrayOfSignedVoluntaryExitMessageMetadata
	}

	// all schemas are nil
	return nil
}

type NullableStakingOperationMetadata struct {
	value *StakingOperationMetadata
	isSet bool
}

func (v NullableStakingOperationMetadata) Get() *StakingOperationMetadata {
	return v.value
}

func (v *NullableStakingOperationMetadata) Set(val *StakingOperationMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableStakingOperationMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableStakingOperationMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakingOperationMetadata(val *StakingOperationMetadata) *NullableStakingOperationMetadata {
	return &NullableStakingOperationMetadata{value: val, isSet: true}
}

func (v NullableStakingOperationMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakingOperationMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
